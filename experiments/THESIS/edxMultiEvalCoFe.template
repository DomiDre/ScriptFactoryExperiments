import sys, os
thesisimgs = os.environ['phdthesisimgs']
cwd = sys.path[0]
import matplotlib.pyplot as plt
plt.style.use('phdthesis')

# remove some annoying warnings
import warnings
warnings.filterwarnings("ignore", category=UserWarning, module='matplotlib')

import numpy as np
from utils.fileformats import load_xy, load_edx_htm
from PlottingTemplates.edx import *
from EDX.edx import *
from math import floor, log10

samplename = '{{samplename}}'
savefile = thesisimgs+'{{Chapter}}_EDX_multiEvalCoFe'+samplename

min_E, max_E = 5.5, 8.5
min_I, max_I = 0.,1.3
lines_Fe, lines_Co, intensity_Ka1 = get_x_ray_CoFe()
num_measurements = 5

legend_label = "EDX"

current_sample = samplename+'_1'
datfile = current_sample+'.txt'  
E, I, sI = get_EI(datfile, min_E)
num_pts = len(E)
energies = np.zeros((num_pts, num_measurements))
intensities = np.zeros((num_pts, num_measurements))
sig_intensities = np.zeros((num_pts, num_measurements))
ratios = []

for i in range(1, 1+num_measurements):
  current_sample = samplename+'_'+str(i)
  datfile = current_sample+'.txt'
  
  htmfile = datfile.replace('.txt', '.htm')
  E, I, sI = get_EI(datfile, min_E)

  energies[:, i-1] = E
  intensities[:, i-1] = I
  sig_intensities[:, i-1] = sI

  elements, weight_percent, atomic_percent = load_edx_htm(htmfile)
  sf_Co = get_CoFeRatio(elements, atomic_percent)
  ratios.append(1/sf_Co)

mE = np.mean(energies, axis=1)
mI = np.mean(intensities, axis=1)
msI = np.sqrt(np.mean(sig_intensities**2, axis=1))

mRatio = np.mean(ratios)
sRatio = np.std(ratios, ddof=1)
ratio_FeCo = np.round(mRatio, 1)
sig_ratio_FeCo = int(np.round(sRatio,1) // (10**floor(log10(np.round(sRatio,1)))))

Fe_line = get_el_line(lines_Fe, E, min_E)
Co_line = get_el_line(lines_Co, E, min_E)
model = Fe_line/intensity_Ka1 + Co_line/mRatio


# Plot
fig, ax = init_fig()
plot_ratio(ax, str(ratio_FeCo)+'('+str(sig_ratio_FeCo)+')')
plot_model(ax, E, model)
errorbar(ax, mE, mI, msI, label=legend_label)
setup_ax(ax, min_E, max_E, min_I, max_I)
fig.savefig(savefile)

print('Co:Fe = ' + str(np.mean(ratios)) + ' +/- ' + str(np.std(ratios,ddof=1)))